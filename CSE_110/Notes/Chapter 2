# 2.0 to 2.6 
ASCll is a table of how computers store text into numbers
Unicode is a tbale of 128,000 characters, punctucation and other symbols convering 135 modern and ancient scripts.
    Unicode Examples : Braille, Musical Notation, Geometric shapes, Emoticons.

Data Types
    is way to encode some type of value so that the computer can mainpulate it (using 1s and 0s - Binary Numbers)
        Common data types 
            Boolean - true or false statements
            Ingteger - 14
            Floating point - 3.14
            String - tex 



----------Java's primitive data types----------------
    bytes - Integers (whole numbers) range -128 to 128
    short - Integers range of -32,768 to 32,767
    int  - Integers range of -2,147,483,648 to +2,147,483,647
    long - Integers in the range of -9,223,372,036,854,775,808 to +9,223,372,036,854,775,807
    float - Real numbers in the range of ±3.40282347 x 1038 to 1.40239846 x 10-45
    double - Real numbers in the range of ±3.40282347 x 1038 to 1.40239846 x 10-45
    char - Any single character
    boolean - Only two values: true and false

Type    Size    range
byte    8       -128 to +127
short   16      -32,768 to +32,767
int     32      -2,147,483,648 to +2,147,483,647
long    64      -9,223,372,036,854,775,808 to +9,223,372,036,854,775,807
float   32      ±3.40282347 x 1038 to 1.40239846 x 10-45
double  64      ±1.7976931348623157 x 10308 to 4.9406564584124654 x 10-324

In general use -> Integers are used for whole numbers 
               -> Double are used for real numbers

** Java String is not a Java primitive type **

Expressions will always evaluate to a value.

        Literal Expressions
Data Types      Literal Examples
int             -1 , 0 , 99
float           123.44f, -3f , 0.0f
double          123.123 , -3.0 , 0.0
String          "Hello!",   "Hi" , "123"
boolean         true(1), false(0) 

Compound Expressions - will always evaluate according to order of operations
    Operation               Operator
Parentheses                   ()
Multiplication & Divison    * , /
Addition & Subtraction      + , -

                String Escape Sequences
    Escape Sequences        What it represents
        \n                      a Newline ( or Return) character
        \t                      a tab character
        \"                      it allows the double Quote mark within the console print out -> "Hello"
        \'                      it allows the singal Quote mark within the console print out -> 'Hello'
        \\                      it allows the backlash within the console output -> /Hello

                    Java Math
        Operation               Java Operator
        Addition                     +
        Subtraction                  -
        Multiplication               *
        Division                     /
        Modulus (Remainder)          %

Operators are instructions that can tell the computer to do some work.
The Operators are use in expressions typically made of two operands, one operator that gives an output; 3 + 5 = 8

Integer Division - an int divided by and int will always give an int result in Java.

Compound Expressions - are expressions composed of sub-expressions
Expression - are list of intructions for the computer to follow to compute a value
Concatenation - is building longer Strings out of shorter Strings.

# 2.7 Type Casting
Java cannot perform operations with operands of different types.

Narrowing Cast : will convert data from a data type with a wider range of valid values to a data type with a narrower range of valid values. Narrowing casts include the following:

            From Type   |   To Type
            double          float
            double          int 
            float           int

Implicit Cast :
Java will automatically cast a value of a narrower type to an equivalent value of a wider type.

To explicitly cast a value from one data type to another we use the following syntactic form:
(<dataTypeToCastTo>)valueToCast ; (int)3.0 
-> You can also get different outputs for values that you need more of scope ; float(3.145 * 3.56 * 56.6777)

# 2.8 Converting Data Types
Cast Operations & Parse Methods are expressions, and expressions always evaluated to a value.

# 2.9.1 
    Basic java code setup
        FILENAME : main.java
        FILENAME : Contents (below)

        class main {
            public static void main(string[] arg){
                **Code Geos here**
            }
        }

NOTED : Class names come from the savefiled so your able to run & complie the code

# 2.10

Variable Name : is just an item name.
Assignment : is the process of taking the variable name and giving it a value ; x = 5 -> Note : the equals sign(=) is what deos the assignment process.

    Vaiable name      |     Assignment Sign |       Value
       int x                     =                    5

Incrementing the Value : x = x + 1; 


# 2.11

Variable Declaration : is a statement that declares a new variable, specifying the variable's name and type. ; int dogs -> Note: Capitalization matters, so dogs is not the same as Dogs.

import java.util.Scanner; -> Imported Library to take Input data from the keyboard input


# 2.12
 
Camel case: Lower camel case abuts multiple words, capitalizing each word except the first, as in numApples or peopleOnBus.
Underscore separated: Words are lowercase and separated by an underscore, as in num_apples or people_on_bus.

                Java reserved words / keywords.
abstract
assert
boolean
break
byte
case
catch
char
class
const
continue
default
do
double
else
enum
extends 	
final
finally
float
for
goto
if
implements
import
instanceof
int
interface
long
native
new
package
private
protected 	
public
return
short
static
strictfp
super
switch
synchronized
this
throw
throws
transient
try
void
volatile
while

The words "true", "false", and "null" are also reserved, and used for literals.

# 2.13

Expression -> is any individual item or combination of items, like variables, literals, operators, and parentheses, that evaluates to a value, like 2 * (x + 1)

Literal -> is a specific value in code like 2.
Operator -> a symbol that performs a built-in calculation, like +, which performs addition.

Arithmetic Operators    |   Description
    +                           Addition Operator ; x + y
    -                           Subtraction Operator ; x - y
    *                           Multiplication Operator ; x * y 
    /                           Division Operator ; x / y

 
                Precedence Rules (order of operations)

 Operator/Convention    |   Description                                             |   Explanation
        ( )                     Items Witin parentheses are evaluated first                 n 2 * (x + 1), the x + 1 is evaluated first, with the resu then multiplied by 2.
        unary-                  - used for negation (unary minus) is next                   In 2 * -x, the -x is computed first, with the result then multiplied by 2.
        * / %           Next to be evaluated are *, /, and %, having equal precedence.      
        + -                      	Finally come + and - with equal precedence.             In y = 3 + 2 * x, the 2 * x is evaluated first, with the result then added to 3, because * has higher precedence than 
                                                                                            +. Spacing doesn't matter: y = 3+2 * x would still evaluate 2 * x first. 
        left to right   If more than one operator of equal precedence could be evaluated, 
                            evaluation occurs left to righ

# 2.14
Special operators called compound operators provide a shorthand way to update a variable, such as userAge += 1 being shorthand for userAge = userAge + 1. 
Other compound operators include -=, *=, /=, and %=. 


System.out.printf("%.2f", myFloat);