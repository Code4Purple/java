# 4.1
You have three common options for outputting text to the console (terminal) window in Java. The first two are very basic, and the last one is more advanced.
Your two basic options are:
    System.out.print(<expression>);
    System.out.println(<expression>);
The only difference between these two basic options is that println always adds (appends) a newline character ('\n') to whatever (<expression>) you tell it to print out.

# 4.2

printf() and format() methods
    A programmer can adjust the way that a program's output appears, a task known as output formatting. 
    The standard output stream System.out provides the methods printf() and format() for output formatting. 
    Both methods are equivalent, so this discussion only refers to printf().
    
    The first argument of the printf() method, the format string, specifies the format of the text to print along with any number of placeholders for printing numeric values. 
    The placeholders are known as format specifiers. A format specifier specifies the type of value to print in its place. 
    A format specifier begins with the % character followed by another character that indicates the value type to be printed. 
    Ex: %d indicates an integer type, and %s indicates a string type.

## Format specifiers for the printf() and format() methods (Chart).
        Format specifier    |       Data types                 |             Notes       
                %c                  char                                Prints a single Unicode character
                %d                  int , long, short                   Prints a decimal integer value
                %of                 int , long, short                   Prints an octal integer value
                %h                  char, int , long, short             Prints a hexadecimal integer value
                %f                  float, double                       Prints a floating-point value
                %e                  float, double                       Prints a floating-point value in scientific notation
                %s                  string                              Prints the characters in a String variable or literal
                %%                                                      Prints the "%" character
                %n                                                      Prints the platform-specifier newline character

## Floating-point formatting (Chart)
        <width>
            Specifies the minimum number of characters to print. If the formatted value has more characters than the width, the value will not be truncated. If the formatted value has fewer characters than the width, the output will be padded with spaces (or 0's if the '0' flag is specified).
                Example : printf("Value: %7.2f", myFloat); -> Value:   12.34
        <.precision>
            Specifies the number of digits to print following the decimal point. If the precision is not specified, a default precision of 6 is used.
                Example 1 : printf("%.4f", myFloat);  -> 12.3400
                Example 2 : printf("%3.4e", myFloat); -> 1.2340e+01
        <flags>
            -     :  Left aligns the output given the specified width, padding the output with spaces.
            +     :  Prints a preceding + sign for positive values. Negative numbers are always printed with the - sign.
            0     :  Pads the output with 0's when the formatted value has fewer characters than the width.
            space :  Prints a preceding space for positive value.
                Exmaple 1: printf("%+f", myFloat);      ->  +12.340000
                Example 2: printf("%08.2f", myFloat);   ->  00012.34

## Integer Formatting
        <width>
            Specifies the minimum number of characters to print. If the formatted value has more characters than the width, the value will not be truncated. If the formatted value has fewer characters than the width, the output will be padded with spaces (or 0's if the '0' flag is specified).
                Example : printf("Value: %7d", myInt); --> Value:     301

        <flags>
            -       : Left aligns the output given the specified width, padding the output with spaces.
            +       : Print a preceding + sign for positive values. Negative numbers are always printed with the - sign.
            0       : Pads the output with 0's when the formatted value has fewer characters than the width.
            space   : Prints a preceding space for positive value
                Example 1: printf("%+d", myInt);    ->   +301
                Example 2: printf("%08d", myInt);   ->   00000301
                Example 3: printf("%+08d", myInt);  ->   +0000301

## String Formatting
    <width>
        Specifies the minimum number of characters to print. If the string has more characters than the width, the value will not be truncated. 
        If the formatted value has fewer characters than the width, the output will be padded with spaces.
            Example: printf("%20s String", myString);      ->           Formatting String
    
    <.precision>
        Specifies the maximum number of characters to print. If the string has more characters than the precision, the string will be truncated.         
            Example: printf("%.6s", myString); -> Format
    
    <flags>
        -   : Left aligns the output given the specified width, padding the output with spaces.
                Example: printf("%-20s String", myString); -> Formatting           String


**The *PrintStream* method flush()** ->  flushes the stream's buffer contents. Ex: The statement System.out.flush(); writes the contents of the buffer for System.out to the computer screen. 
Most Java implementations make System.out flush when a newline character is output or println() method is called. 


# 4.3 
**BOOKMARK**
